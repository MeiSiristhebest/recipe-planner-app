// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(USER)

  recipes       Recipe[]
  favorites     Favorite[]
  mealPlans     MealPlan[]
  shoppingLists ShoppingList[]
  comments      Comment[]
  ratings       Rating[]
}

enum Role {
  USER
  ADMIN
}

model Recipe {
  id           String   @id @default(cuid())
  title        String
  description  String?
  ingredients  Json
  instructions Json
  cookingTime  Int
  difficulty   String
  servings     Int
  image        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  author           User               @relation(fields: [authorId], references: [id])
  authorId         String
  category         Category           @relation(fields: [categoryId], references: [id])
  categoryId       String
  tags             Tag[]
  favorites        Favorite[]
  mealItems        MealPlanItem[]
  comments         Comment[]
  ratings          Rating[]
  ShoppingListItem ShoppingListItem[]
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  recipes Recipe[]
}

model Tag {
  id      String   @id @default(cuid())
  name    String   @unique
  recipes Recipe[]
}

model Favorite {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  String
  createdAt DateTime @default(now())

  @@id([userId, recipeId])
}

model MealPlan {
  id            String   @id @default(cuid())
  name          String?
  weekStartDate DateTime
  isTemplate    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user   User           @relation(fields: [userId], references: [id])
  userId String
  items  MealPlanItem[]
}

model MealPlanItem {
  id       String   @id @default(cuid())
  date     DateTime
  mealType String
  position Int      @default(0)

  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  mealPlanId String
  recipe     Recipe   @relation(fields: [recipeId], references: [id])
  recipeId   String
}

model ShoppingList {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User               @relation(fields: [userId], references: [id])
  userId String
  items  ShoppingListItem[]
}

model ShoppingListItem {
  id        String  @id @default(cuid())
  name      String
  quantity  String
  unit      String
  category  String
  isChecked Boolean @default(false)
  notes     String?

  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)
  shoppingListId String
  recipe         Recipe?      @relation(fields: [recipeId], references: [id])
  recipeId       String?
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User   @relation(fields: [userId], references: [id])
  userId   String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
}

model Rating {
  id        String   @id @default(cuid())
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User   @relation(fields: [userId], references: [id])
  userId   String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String

  @@unique([userId, recipeId])
}
